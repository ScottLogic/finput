{"name":"Finput","tagline":"Financial number input","body":"finput\r\n======\r\n\r\nA vanilla-JS financial amount input control. Supports the following features -\r\n\r\n* auto-formatting\r\n* prevents invalid input whether typed, dragged or pasted\r\n* 'k', 'm', 'b', etc. multiplier keys\r\n\r\nUsage\r\n-----\r\nSee an example finput [here](http://alisd23.github.io/finput)\r\n\r\n#### Install package\r\n`npm install finput`\r\n\r\n#### Initialise input\r\nTo initialise the finput, simply pass the element and any options into the finput constructor.\r\n\r\n```javascript\r\nvar myInput = finput(element, options)\r\n```\r\n\r\nOptions\r\n-----\r\n\r\n##### scale\r\nType: `Number`  \r\nDefault: `2`\r\n\r\nMaximum number of decimal digits the value can take\r\n\r\n##### range\r\nType: `Number`  \r\nDefault: `ALL`\r\n\r\nThe possible range of values that the value can take\r\n\r\nPossible Values:  \r\n- `'ALL'`: Number can take any value  \r\n- `'POSITIVE'`: Number can only be positive\r\n\r\n##### fixed\r\nType: `Boolean`  \r\nDefault: `true`  \r\nIf true, after focus is lost value is formatted to *scale* number of decimal places\r\n\r\n##### thousands\r\nType: `string`  \r\nDefault: `,`  \r\nThe character used to separate thousands in the formatted value.\r\n`E.g. 1,000`\r\n\r\n##### decimal\r\nType: `string`  \r\nDefault: `.`  \r\nThe character used for the decimal point\r\n\r\n##### shortcuts\r\nType: `Object { character: multiplier }`  \r\nDefault: `{\r\n  'k': 1000,\r\n  'm': 1000000,\r\n  'b': 1000000000\r\n}`  \r\nAn object mapping of shortcuts that the user can use to quickly enter common values.\r\nE.g. with the default shortcuts, typing `k` will multiply the number value by 1000\r\n\r\n\r\nAccessing input value\r\n---------------------\r\n\r\nThe formatted value (the inputs value) and raw numeric value can be access directly on the dom element\r\nas follows:  \r\n**Formatted value** - `element.value` _(the normal input value)_  \r\n**Raw numeric value** - `element.rawValue`\r\n\r\n\r\nFunctions\r\n---------\r\n\r\nThe object returned when initialising the finput contains a cleanup function called `destroy`.\r\nFor example:  \r\n\r\n```javascript\r\nvar myInput = finput(element, options);\r\nmyInput.destroy()\r\n```\r\n\r\nThis function removes all the event listeners, making the input behaviour like the default browser\r\ninput once again.\r\n\r\n\r\nInstall Dependencies\r\n--------------------\r\n\r\n`npm install -g grunt-cli`\r\n`npm install`\r\n\r\nDeveloping\r\n----------\r\n\r\n`grunt serve`\r\n\r\nRunning tests\r\n-------------\r\n\r\nBuild and run the server -\r\n\r\n`grunt serve`\r\n\r\n##### WITH browserstack\r\n\r\nSet browserstack config\r\n\r\n- Copy `config.example.json` to a new file: `config.json`\r\n- Update the correct browserstack information\r\n\r\nExecute the tests -\r\n\r\n`grunt test:browserstack`\r\n\r\n##### WITHOUT browserstack\r\n\r\nInstall and run an instance of webdriver e.g. -\r\n\r\n`npm run webdriver update`\r\n`npm run webdriver start`\r\n\r\nExecute the tests -\r\n\r\n`npm run test`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}